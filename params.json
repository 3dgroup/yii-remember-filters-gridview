{"name":"Yii-remember-filters-gridview","body":"yii-remember-filters-gridview\r\n=============================\r\n\r\nThe ERememberFiltersBehavior Yii extension adds up some functionality to the default possibilites of CActiveRecord/Model implementation.\r\n\r\nIt will detect the **search** scenario and it will save the filters from the GridView. This comes handy when you need to **remember them between navigation** during page changes. For lot of navigation and heavy filtering, this functionality can be activated by just a couple of lines.\r\n\r\nIt supports **default filter values** and **remember scenarios** also. For example if you want to show only eg: Active Products, you can setup the default filter using this extension. Or if you have the same modal on different views, you can set different scenarios to remember state separated from each other. See the optional params under Advanced Functionalities and Scenarios section. \r\n\r\n![Please login to see the Demo image!](https://raw.github.com/pentium10/yii-remember-filters-gridview/gh-pages/images/remember_filters_10.png \"Demo\")\r\n\r\nRequirements\r\n--------------------\r\n\r\n- Yii 1.1\r\n\r\nDonate\r\n----------\r\n\r\n[Click here to donate](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=K9TM6HR8JQ4Z8 \"Donate\")\r\n\r\nResources\r\n---------------\r\n\r\n- **[Extension page](http://www.yiiframework.com/extension/remember-filters-gridview/) (don't forget to cast your support vote)**\r\n- [Report a bug](http://github.com/pentium10/yii-remember-filters-gridview/issues \"Report a bug\")\r\n- [Forum](http://www.yiiframework.com/forum/index.php?/topic/15847-extension-remember-filters-gridview/ \"Forum\")\r\n- [Clear Filters Gridview extension](http://www.yiiframework.com/extension/clear-filters-gridview \"http://www.yiiframework.com/extension/clear-filters-gridview\")\r\n\r\nUsage\r\n---------\r\n\r\nStep 1\r\n--------\r\n\r\nTo use this extension, just copy this file to your components/ directory, add 'import' => 'application.components.ERememberFiltersBehavior', [...] to your config/main.php and paste the following code to your behaviors() method of your model\r\n\r\n```php\r\npublic function behaviors() {\r\n       return array(\r\n           'ERememberFiltersBehavior' => array(\r\n               'class' => 'application.components.ERememberFiltersBehavior',\r\n\t\t\t   'defaults'=>array(),           /* optional line */\r\n\t\t\t   'defaultStickOnClear'=>false   /* optional line */\r\n           ),\r\n       );\r\n}\r\n```\r\n\r\nStep 2\r\n---------\r\n\r\n**Your actionAdmin() must not use unsetAttributes() as this was moved to the extension.**\r\n\r\nWith this extension the actionAdmin instead of the classic\r\n```php\r\n        public function actionAdmin()\r\n        {\r\n                $model=new Company('search');\r\n                $model->unsetAttributes();  // clear any default values\r\n                if(isset($_GET['Company']))\r\n                        $model->attributes=$_GET['Company'];\r\n                $this->render('admin',array(\r\n                        'model'=>$model,\r\n                ));\r\n        }\r\n```\r\n\r\ncan be as simple as:\r\n```php\r\n        public function actionAdmin()\r\n        {\r\n                $model=new Company('search');\r\n                $this->render('admin',array(\r\n                        'model'=>$model,\r\n                ));\r\n        }\r\n```\r\n\r\nAdvanced Functionalities\r\n----------------------------------\r\n\r\n_(if you use these functionalities please Donate)_\r\n\r\n- **'defaults'** is a key value pair array, that will hold the defaults for your filters. \r\nFor example when you initially want to display `active products`, you set to `array('status'=>'1')`. \r\nYou can of course put multiple default values in the array.\r\n\r\n- **'defaultStickOnClear'=>true** can be used, if you want the default values to be put back when the user clears the filters\r\nThe default set is `false` so if the user clears the filters, also the defaults are cleared out, the user will get an absolutely clean filter form. When `true`, if the form is cleared, he will get a form with defaults values.\r\n\r\n\r\nScenarios\r\n--------------\r\n\r\n_(if you use these functionalities please Donate)_\r\n\r\nYou can use `scenarios` to remember the filters on multiple states of the same model. This is helpful when you use the same model on different views and you want to remember the state separated from each other.  \r\nKnown limitations: the views must be in different actions (not on the same view)  \r\n\r\nTo set a scenario add the setRememberScenario call after the instantiation  \r\nSample code:  \r\n```php\r\n        public function actionAdmin()\r\n        {\r\n                $model=new Company('search');\r\n\t\t\t\t$model->setRememberScenario('scene1');\r\n                $this->render('admin',array(\r\n                        'model'=>$model,\r\n                ));\r\n        }\r\n````\r\n\r\n\r\nThis extension has also a pair [Clear Filters Gridview](http://www.yiiframework.com/extension/clear-filters-gridview \"http://www.yiiframework.com/extension/clear-filters-gridview\")\r\n\r\nremember, filters, cgridview, gridview, store, reload, controller, model, behavior, interface, widget, stick, scenario\r\n\r\nChange Log \r\n-----------------\r\n\r\n[CHANGELOG.md](http://github.com/pentium10/yii-remember-filters-gridview/blob/master/CHANGELOG.md)\r\n\r\nContributing\r\n------------\r\n\r\n1. Fork it.\r\n2. Create a branch (`git checkout -b my_enhancement_name`)\r\n3. Commit your changes (`git commit -am \"Added Sorting\"`)\r\n4. Push to the branch (`git push origin my_enhancement_name`)\r\n5. Open a [Pull Request][1]\r\n6. Enjoy a refreshing Diet Coke and wait\r\n\r\n[1]: http://github.com/pentium10/yii-remember-filters-gridview/pulls","tagline":"This yii extension helps you to remember/store filter values of GridViews during navigation, filters will stick.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}